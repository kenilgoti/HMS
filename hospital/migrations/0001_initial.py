# Generated by Django 4.1.3 on 2023-01-16 16:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('medicines', models.TextField(blank=True, db_column='Medicines', null=True)),
                ('fess', models.IntegerField(blank=True, db_column='Fess', null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=255, null=True)),
                ('phone', models.BigIntegerField(blank=True, db_column='Phone', null=True)),
                ('img', models.ImageField(blank=True, db_column='User_Img', null=True, upload_to='img')),
                ('doctor_id', models.IntegerField(blank=True, db_column='Doctor_Id', null=True)),
                ('staff_id', models.IntegerField(blank=True, db_column='Staff_Id', null=True)),
                ('check_out_status', models.CharField(db_column='Check_Out', default=False, max_length=255)),
                ('user_bed', models.IntegerField(blank=True, db_column='Bed_Id', null=True)),
                ('user_bills', models.IntegerField(blank=True, db_column='Total_Bills', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lillnes',
            fields=[
                ('lillne_id', models.AutoField(db_column='Illnes_Id', primary_key=True, serialize=False)),
                ('lillne_name', models.CharField(db_column='Illness_name', default=None, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='room',
            fields=[
                ('roomId', models.AutoField(db_column='Room_ID', primary_key=True, serialize=False)),
                ('roomType', models.CharField(db_column='Room_Type', max_length=255, unique=True)),
                ('roomPrice', models.IntegerField(blank=True, db_column='Room_Price', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Medicines',
            fields=[
                ('medicinesId', models.AutoField(db_column='Medicines_Id', primary_key=True, serialize=False)),
                ('medicinesName', models.CharField(db_column='Medicines_Name', max_length=255, unique=True)),
                ('medicinesPrice', models.IntegerField(db_column='Medicines_Price')),
                ('medicinesQuantity', models.IntegerField(db_column='Medicines_Quantity')),
                ('lillness', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hospital.lillnes')),
            ],
        ),
        migrations.CreateModel(
            name='bed',
            fields=[
                ('bedId', models.AutoField(db_column='Bed_Id', primary_key=True, serialize=False)),
                ('bedStatus', models.CharField(db_column='Bed_Status', default=False, max_length=255)),
                ('roomId', models.ForeignKey(db_column='Room_Id', on_delete=django.db.models.deletion.CASCADE, to='hospital.room')),
                ('user_id', models.ForeignKey(blank=True, db_column='User_Id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='lillness',
            field=models.ForeignKey(blank=True, db_column='Illnes_Id', null=True, on_delete=django.db.models.deletion.CASCADE, to='hospital.lillnes'),
        ),
        migrations.AddField(
            model_name='user',
            name='room',
            field=models.ForeignKey(blank=True, db_column='Room_Id', null=True, on_delete=django.db.models.deletion.CASCADE, to='hospital.room'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
